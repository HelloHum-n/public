# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- main
trigger: none

parameters:
- name: csvFilePath
  default: '.\Release.csv'
- name: myEnv
  displayName: my stage
  type: string
  default: DEV
  values:
  - DEV
  - IST
  - PRD
- name: mode
  displayName: pipeline mode
  type: string
  default: detect_apps
  values:
  - detect_apps
  - deploy_apps
- name: NEW_SAML_APP
  displayName: comma separated List of NEW-SAML-APP
  type: string
  default: "NA"
- name: Update_App
  displayName: comma separated List of Update-App
  type: string
  default: "NA"
- name: New_OIDC_App
  displayName: comma separated List of New-OIDC-App
  type: string
  default: "NA"
- name: DELETE_APP
  displayName: comma separated List of DELETE-APP
  type: string
  default: "NA"

pool:
  vmImage: 'windows-latest'
variables:
  myVar1: ${{ variables.myVar}}
  myVar2: $(myVar)
  apps: app1
stages:
- ${{ if eq(parameters.mode, 'detect_apps') }}:
  - stage: detect_apps
    jobs: 
    - job: detect_apps
      steps:
      - task: PowerShell@2
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        inputs:
          targetType: 'inline'
          script: |
            $apps = Import-csv -Path $(Build.SourcesDirectory)\${{ Parameters.csvFilePath }}
            ConvertTo-Json $apps
            $NEW_SAML_APP = ($apps | Group-Object -Property Action | where-object -Property Name -eq -Value "NEW-SAML-APP").Group.ApplicationName -join ","
            $Update_App = ($apps | Group-Object -Property Action | where-object -Property Name -eq -Value "Update-App").Group.ApplicationName -join ","
            $New_OIDC_App = ($apps | Group-Object -Property Action | where-object -Property Name -eq -Value "New-OIDC-App").Group.ApplicationName -join ","
            $DELETE_APP = ($apps | Group-Object -Property Action | where-object -Property Name -eq -Value "DELETE-APP").Group.ApplicationName -join ","

            $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/pipelines/$($env:SYSTEM_DEFINITIONID)/runs?api-version=6.0-preview.1"
            $body = ('{"stagesToSkip":[],"resources":{"repositories":{"self":{"refName":"refs/heads/main"}}},"templateParameters":{"mode":"deploy_apps","myEnv":"${{parameters.myEnv}}","NEW_SAML_APP":"'+$NEW_SAML_APP+'","Update_App":"'+$Update_App+'","New_OIDC_App":"'+$New_OIDC_App+'","DELETE_APP":"'+$DELETE_APP+'"},"variables":{"myVar":{"value":"DOTS"}}}')
            write-host $url
            write-host $body
            $run = Invoke-RestMethod -Method POST -Uri $url -Headers @{Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"} -body $body -ContentType application/json
            write-host $run

- ${{ if eq(parameters.mode, 'deploy_apps') }}:
  - stage: verification
    jobs:
    - job: Verification_Job
      steps:
        - task: PowerShell@2
          inputs:
            targetType: inline
            script: |
              Write-host do some verification
- ${{ if eq(parameters.mode, 'deploy_apps') }}:
  - stage: ${{parameters.myEnv}}
    jobs:
    - ${{ each app in split(parameters.NEW_SAML_APP,',') }}:
      - ${{ if ne(app, '') }}:
        #- deployment: ${{parameters.myEnv}}_NEW_SAML_APP_${{app}}
        - deployment: ${{parameters.myEnv}}_NEW_SAML_APP_${{ replace(app,'-','_') }}
          environment: ${{parameters.myEnv}}
          strategy:
            runOnce:
              deploy:
                steps:
                  - task: PowerShell@2
                    inputs:
                      targetType: inline
                      script: |
                        Write-Host Deploying the code for ${{app}} .....
                        if ((get-random -Maximum 10) -gt 8) {throw "random error"}
                        Write-Host the code for ${{app}} has been deployed successfully!

    - ${{ each app in split(parameters.Update_App,',') }}:
      - ${{ if ne(app, '') }}:
        - deployment: ${{parameters.myEnv}}_Update_App_${{ replace(app,'-','_') }}
          environment: ${{parameters.myEnv}}
          strategy:
            runOnce:
              deploy:
                steps:
                  - task: PowerShell@2
                    inputs:
                      targetType: inline
                      script: |
                        Write-Host Deploying the code for ${{app}} .....
                        if ((get-random -Maximum 10) -gt 8) {throw "random error"}
                        Write-Host the code for ${{app}} has been deployed successfully!

    - ${{ each app in split(parameters.New_OIDC_App,',') }}:
      - ${{ if ne(app, '') }}:
        - deployment: ${{parameters.myEnv}}_New_OIDC_App_${{ replace(app,'-','_') }}
          environment: ${{parameters.myEnv}}
          strategy:
            runOnce:
              deploy:
                steps:
                  - task: PowerShell@2
                    inputs:
                      targetType: inline
                      script: |
                        Write-Host Deploying the code for ${{app}} .....
                        if ((get-random -Maximum 10) -gt 8) {throw "random error"}
                        Write-Host the code for ${{app}} has been deployed successfully!

    - ${{ each app in split(parameters.DELETE_APP,',') }}:
      - ${{ if ne(app, '') }}:
        - deployment: ${{parameters.myEnv}}_DELETE_APP_${{ replace(app,'-','_') }}
          environment: ${{parameters.myEnv}}
          strategy:
            runOnce:
              deploy:
                steps:
                  - task: PowerShell@2
                    inputs:
                      targetType: inline
                      script: |
                        Write-Host Deploying the code for ${{app}} .....
                        if ((get-random -Maximum 10) -gt 8) {throw "random error"}
                        Write-Host the code for ${{app}} has been deployed successfully!
 