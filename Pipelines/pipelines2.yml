trigger: none

parameters:
  - name: Environment
    default: 'IST'
    type: string
    values:
    - DEV
    - IST
    - PRD


variables:
  - group: ${{parameters.Environment}}-Variables
  - group: ${{parameters.Environment}}-Secrets
  - name: tenantIDvar
    value: $[variables.tenantID]

pool:
  vmImage: 'windows-latest'

jobs:
- job: Start
  steps:
    - checkout: self
      persistCredentials: true
    - task: DownloadSecureFile@1
      name: abc
      displayName: 'Download abc certificate'
      inputs:
        secureFile: 'abc.com.pfx'

    - task: DownloadSecureFile@1
      name: connectionCert
      displayName: 'Download Service Connection certificate'
      inputs:
        secureFile: '${{parameters.Environment}}-Service-Connection.pfx'
    - task: PowerShell@2
      name: constructVariables
      inputs:
        targetType: inline
        script: |
          $certBytes = [System.Convert]::FromBase64String("$(abc-com-pfx)")
          # Create an X509Certificate2 object from the byte array
          # If the certificate requires a password (e.g., a PFX/PKCS12 file), provide it as a SecureString
          $password = ""
          $pfxCert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certBytes, $password)

          # You can now work with the $x509Cert object
          #Write-Host "Certificate Subject: $($x509Cert.Subject)"
          #Write-Host "Certificate Thumbprint: $($x509Cert.Thumbprint)"

          $rawCertData = $pfxCert.GetRawCertData()
          $base64String = [System.Convert]::ToBase64String($rawCertData) 
          // after the whole conversion
          "$base64String"  | Out-file -force whatif.txt 
          //vanilla version directy from AKV
          "$(abc-com-pfx)" | Out-file -force whatif2.txt 
    - task: PowerShell@2
      name: gitCommit
      inputs:  
        targetType: inline
        script: |
          git config --global user.email "entraidProject@azuredevops.com"
          git config --global user.name "serivce account"
          git fetch origin $(Build.SourceBranchName):tmp
          git rebase tmp
          git add -A
          git commit -m "new txt file"
          git push origin HEAD:$(Build.SourceBranchName)