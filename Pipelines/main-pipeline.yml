trigger: none

parameters:
- name: csvFilePath
  default: '.\Release.csv'
- name: myEnv
  displayName: my stage
  type: string
  default: DEV
  values:
  - DEV
  - IST
  - PRD
- name: NEW-SAML-APP_pipelineName
  type: string
  default: '.\Release.csv'
- name: New-OIDC-App_pipelineName
  type: string
  default: '.\Release.csv'
- name: Update-APP_pipelineName
  type: string
  default: '.\Release.csv'
- name: DELETE-APP_pipelineName
  type: string
  default: '.\Release.csv'
- name: Update_App_pipelineName
  type: string
  default: '.\Release.csv'

pool:
  vmImage: 'windows-latest'
variables:
- name: action1
  value: NEW-SAML-APP
- name: action2
  value: NEW-OIDC-APP
- name: action3
  value: UPDATE-APP-OBJ
- name: action4
  value: UPDATE-SP-OBJ
- name: action5
  value: DELETE-APPLICATION
- name: action1_pipelineName
  value: IST
- name: action2_pipelineName
  value: IST
- name: action3_pipelineName
  value: IST
- name: action4_pipelineName
  value: IST
- name: action5_pipelineName
  value: IST







jobs: 
- job: ActionTriggers
  steps:
  - task: PowerShell@2
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        $apps = Import-csv -Path $(Build.SourcesDirectory)\${{ Parameters.csvFilePath }}
        az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject) --use-git-aliases true
        # Tiggering child ymls
        foreach ($app in $apps){
            if( ($app.Action) -eq $(action1) ){
                Write-Host "Performing action in $(Environment) - ($app.Action) with app name - ($app.ApplicationName)"
                az pipelines run --name $(action1_pipelineName) --parameters "AppName=($app.ApplicationName)" "Environment=$(Environment)"
            }elseif( ($app.Action) -eq $(action2) ){
                Write-Host "Performing action in $(Environment) - ($app.Action) with app name - ($app.ApplicationName)"
                az pipelines run --name $(action2_pipelineName) --parameters "AppName=($app.ApplicationName)" "Environment=$(Environment)"
            }elseif( ($app.Action) -eq $(action3) ){
                Write-Host "Performing action in $(Environment) - ($app.Action) with app name - ($app.ApplicationName)"
                az pipelines run --name $(action3_pipelineName) --parameters "AppName=($app.ApplicationName)" "Environment=$(Environment)"
            }elseif( ($app.Action) -eq $(action4) ){
                Write-Host "Performing action in $(Environment) - ($app.Action) with app name - ($app.ApplicationName)"
                az pipelines run --name $(action4_pipelineName) --parameters "AppName=($app.ApplicationName)" "Environment=$(Environment)"
            }elseif( ($app.Action) -eq $(action5) ){
                Write-Host "Performing action in $(Environment) - ($app.Action) with app name - ($app.ApplicationName)"
                az pipelines run --name $(action5_pipelineName) --parameters "AppName=($app.ApplicationName)" "Environment=$(Environment)"
            }else{
                Write-Host "($app.Action) IS NOT a valid action for app name - ($app.ApplicationName)"
            }
        }
