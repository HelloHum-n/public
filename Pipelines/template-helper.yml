trigger: none

name: Write-File

parameters:
  - name: Environment
    displayName: Environment
    default: 'IST'
    type: string
    values:
    - IST
    - DEV
    - PRD

  - name: AppName
    displayName: Application Name
    default: ''

  - name: AppType
    displayName: Application Type
    default: 'SAML'
    type: string
    values:
    - SAML
    - OIDC

  - name: EntityID
    displayName: Application entity ID or Identifier URI (EntityID/identifierUris)
    default: ''
    type: string

  - name: assuranceLevel
    displayName: (Mandatory) Assurance Level of the application
    default: 'Medium'
    type: string
    values:
    - Low
    - Medium
    - High
    - Critical

  - name: requireBankIssuedDevices
    displayName: (Mandatory) Requre Bank Issued Devices
    default: 'False'
    type: string
    values:
    - True
    - False

  - name: SPflowVerification
    displayName: (Mandatory for SAML) Require SAML2 SP initiated flow verification cert
    default: 'false'
    type: string
    values:
    - true
    - false

  - name: Description
    displayName: (Optional) Application Description
    default: 'Default'
    type: string

  - name: nameidentifierFormat
    displayName: Claims - (Mandatory) Format for the nameidentifier in the claims
    default: 'emailAddress'
    type: string
    values:
    - emailAddress
    - transient
    - unspecified

  - name: nameidentifierAttribute
    displayName: Claims - (Mandatory) User Attribute for the nameidentifier in the claims
    default: 'userprincipalname'
    type: string

  - name: directClaimEmail
    displayName: Claims - (Mandatory) email Claim Name
    default: 'email'
    type: string

  - name: directClaimEmailAttribute
    displayName: Claims - (Mandatory) email Claim Attribute
    default: 'userprincipalname'
    type: string

  - name: SSOID
    displayName: Claims - (Mandatory) SSOID Claim Name
    default: 'bnsScotiaID'
    type: string

  - name: SSOIDAttribute
    displayName: Claims - (Mandatory) SSOID Claim Attribute
    default: 'extension_73f338a4697b4577bd8334ffb89ccdb4_employeenumber'
    type: string


  - name: groupclaimName
    displayName: Claims - (Optional) Provide the name of the group claim
    default: 'default'
    type: string

  - name: groupClaimRegex
    displayName: Claims - (Optional) Provide the regex pattern of the group claim
    default: 'default'
    type: string

  - name: groupclaimRegexReplace
    displayName: Claims - (Optional) Provide the regex replacement pattern of the group claim
    default: 'default'
    type: string

variables:
  - name: stepSucceed
    value: false
  - name: AppStagingFolderPath
    value: "./Entra/EntraID/Applications-ADO/${{parameters.Environment}}/Staging/"
  - name: templateFolderPath
    value: "./Entra/EntraID/Applications-ADO/${{parameters.Environment}}/Staging/Templates"
  - name: SAMLappTemplateName
    value: "SAML_App_Template.json"
  - name: OIDCappTemplateName
    value: "OIDC_App_Template.json"
  - name: SAMLClaimWithGroupTemplateName
    value: "SAML_Claims_withGroupClaims_Template.json"
  - name: SAMLClaimNoGroupTemplateName
    value: "SAML_Claims_noGroupClaims_Template.json"    
  - group: ${{parameters.Environment}}-Variables
  - name: tenantIDvar
    value: $[variables.tenantID]

pool:
  vmImage: 'windows-latest'

jobs:
- job: ${{ replace(parameters.AppName,'-','_') }}_Create_Template
  displayName: Generate staging templates
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self
    persistCredentials: true
  - task: PowerShell@2
    name: createTemplates
    inputs:
      targetType: 'inline'
      script: |
        Get-ChildItem "$(AppStagingFolderPath)"
        Write-host "-______________-"
        Get-ChildItem "$(templateFolderPath)"
          ################################################
          # SAML Apps.                                   #
          ################################################
        if ( "${{parameters.AppType}}" -eq "SAML" ){
          $templateFileAppObj = Get-content -Path "$(templateFolderPath)/$(SAMLappTemplateName)" -RAW | ConvertFrom-Json

          ################################################
          # Go through paramers one by one               #
          ################################################
          
          #AppName
          $templateFileAppObj.displayName = "${{parameters.AppName}}"

          #EntityID
          $arrayEntity = @('${{parameters.EntityID}}')
          $templateFileAppObj.identifierUris = $arrayEntity

          #SPflowVerification
          $templateFileAppObj.requestSignatureVerification.isSignedRequestRequired = "${{parameters.SPflowVerification}}"

          #Description
          if ("${{parameters.Description}}" -ne "default"){
            $templateFileAppObj.Description = "${{parameters.Description}}"
          }
          
          # SAML Claims

          # no Group Claim
          if ("${{parameters.groupClaimName}}" -eq "default"){
            $templateFileClaimObj = Get-content -Path "$(templateFolderPath)/$(SAMLClaimNoGroupTemplateName)" -RAW | ConvertFrom-Json

            # NameIdentifier
            $nameid = $templateFileClaimObj.claims | Where-Object { $_.'@odata.type' -eq "#microsoft.graph.samlNameIdClaim" } 
            #unspecified / emailAddress
            $nameid.nameIdFormat = "${{parameters.nameidentifierFormat}}"
            $nameid.configurations.attribute.id = "${{parameters.nameidentifierAttribute}}"

            #email
            $emailClaim = $templateFileClaimObj.claims | Where-Object { $_.name -eq "email" } 
            $emailClaim.name = "${{parameters.directClaimEmail}}"
            #userprincipalname / mail
            $emailClaim.configurations.attribute.id = "${{parameters.directClaimEmailAttribute}}"

            #App manifest template
            $templateFileAppObj.groupMembershipClaims = $null
            $emptyObjArray = New-Object -TypeName System.Collections.ArrayList
            $templateFileAppObj.optionalClaims.saml2Token =  $emptyObjArray 


          # With Group Claim
          }else{
            $templateFileClaimObj = Get-content -Path "$(templateFolderPath)/$(SAMLClaimWithGroupTemplateName)" -RAW | ConvertFrom-Json

            # NameIdentifier
            $nameid = $templateFileClaimObj.claims | Where-Object { $_.'@odata.type' -eq "#microsoft.graph.samlNameIdClaim" } 
            #unspecified / emailAddress
            $nameid.nameIdFormat = "${{parameters.nameidentifierFormat}}"
            $nameid.configurations.attribute.id = "${{parameters.nameidentifierAttribute}}"

            #email
            $emailClaim = $templateFileClaimObj.claims | Where-Object { $_.name -eq "email" } 
            $emailClaim.name = "${{parameters.directClaimEmail}}"
            #userprincipalname / mail
            $emailClaim.configurations.attribute.id = "${{parameters.directClaimEmailAttribute}}"

            #Group
            $groupClaim = $templateFileClaimObj.claims | Where-Object { $_.'name' -eq "defaultGroupClaimName" }
            $groupClaim.name = "${{parameters.groupclaimName}}"
            $groupClaim.configurations.transformations.regex = "${{parameters.groupClaimRegex}}"
            $groupClaim.configurations.transformations.replacement = "${{parameters.groupclaimRegexReplace}}"

          }

          ################################################
          # OIDC Apps.                                   #
          ################################################
        }else{
          $templateFileAppObj = Get-content -Path "$(templateFolderPath)/$(OIDCappTemplateName)" -RAW | ConvertFrom-Json
          #$templatefileObj| ConvertTo-Json -Depth 20  
        }

        ################################################
        # Files Output                                 #
        ################################################       

        #App Staging File
        $AppStagingOutput = $templateFileAppObj | ConvertTo-Json -Depth 20 
        $AppStagingFilePath = "$(AppStagingFolderPath)/${{parameters.AppName}}_App.json"
        $AppStagingOutput | Out-File -FilePath $AppStagingFilePath -Force

        # SP Staging File
        $SPTemplatebody = @"
        {
            "preferredSingleSignOnMode" : "SAML",
            "customSecurityAttributes":
            {
                "Application":
                {
                    "@odata.type":"#Microsoft.DirectoryServices.CustomSecurityAttributeValue",
                    "AssuranceLevel":"DefaultAttributeValue",
                    "RequireBankIssuedDevices":"DefaultAttributeValue"
                }
            }
        }
        "@

        $SPTemplateObj = $SPTemplatebody | ConvertFrom-Json 
        if ( "${{parameters.AppType}}" -eq "SAML"){
          $SPTemplateObj.preferredSingleSignOnMode = "saml"
        }else{
          $SPTemplateObj.preferredSingleSignOnMode = "oidc"
        }
        $SPTemplateObj.customSecurityAttributes.Application.AssuranceLevel = "${{parameters.assuranceLevel}}"
        $SPTemplateObj.customSecurityAttributes.Application.RequireBankIssuedDevices = "${{parameters.requireBankIssuedDevices}}"

        $SpStagingOutput = $SPTemplateObj | ConvertTo-Json -Depth 20
        $SpStagingFilePath = "$(AppStagingFolderPath)/${{parameters.AppName}}_Sp.json"
        $SpStagingOutput | Out-File -FilePath $SpStagingFilePath -Force

        # Claim Staging File
        $claimStagingOutput = $templateFileClaimObj | ConvertTo-Json -Depth 30 
        $claimStagingFilePath = "$(AppStagingFolderPath)/${{parameters.AppName}}_customClaims.json"
        $claimStagingOutput | Out-File -FilePath $claimStagingFilePath -Force

  - script: echo Task 2 filename - $(fileName)
    name: echoOutput
  - script: |
     git config --global user.email "entraidProject@azuredevops.com"
     git config --global user.name "serivce account"
     cd $(Build.SourcesDirectory)\$(System.TeamProject)
     git add -A
     git commit -m "new"
     git push origin HEAD:$(Build.SourceBranchName)
    name: gitCommit
  - checkout: self
    clean: true
#git branch --all
