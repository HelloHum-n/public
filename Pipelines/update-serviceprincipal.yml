trigger: none

parameters:
  - name: AppName
    default: 'defaultparaAppName'
  - name: AppID
    default: 'defaultparaAppID'
  - name: csvFileName
    default: 'defaultCSV'
  - name: Environment
    default: 'IST'
    type: string
    values:
    - DEV
    - IST
    - PRD

variables:
  - name: stepSucceed
    value: false
  - name: AppStatesFolderPath
    value: "./EntraID/Applications-ADO/${{parameters.Environment}}/Apps-States/"
  - name: AppStagingFolderPath
    value: "./EntraID/Applications-ADO/${{parameters.Environment}}/Staging/"   
  - group: ${{parameters.Environment}}-Variables
  - group: ${{parameters.Environment}}-Secrets
  - name: tenantIDvar
    value: $[variables.tenantID]
    
pool:
  vmImage: 'windows-latest'

jobs:
- deployment: ${{ replace(parameters.csvFileName,'.','_')}}__UPDATE_SP_OBJ__${{ replace(parameters.AppName,'-','_') }}
  environment: ${{parameters.Environment}}
  strategy:
    runOnce:
      deploy:
        steps:
          - checkout: self
            persistCredentials: true
          - task: PowerShell@2
            name: constructVariables
            inputs:
              targetType: inline
              script: |
                $tenantID = "$(tenantIDvar)"
                #Write-Host "tenant ID is $tenantID"
                Write-Host "tenantID: $(tenantID)"
                 # -----Updating app by locating application with App ID---- 
                if ( "${{parameters.AppID}}" -ne "defaultparaAppID" ){
                  Write-Host 'Searching for App-State files using Application ID: ${{parameters.AppID}}'
                  $SpFileNamePattern = "*"+"${{parameters.AppID}}"+"_ServicePrincipal.json"
                  # Put some logic to catch file not found
                  $SpFile = Get-ChildItem -Path $(AppStatesFolderPath) -Name $SpFileNamePattern
                  #write-host "---AppFile:--- $appFile "
                  #$appNameAry = $appFile -split "\\"
                  #$appName = $appNameAry[($appNameAry.count)-1]
                  $appName = $SpFile -replace "_${{parameters.AppID}}_ServicePrincipal.json"

                  # Get App Staging File Path
                  # Json file containing the application details (Hint: Create one in staging folder)
                  $SpStagingFileName = "$appName"+"_Sp.json"
                  $SpStagingJsonFile = "$(AppStagingFolderPath)"+"/"+"$SpStagingFileName"
                  Write-Host "##vso[task.setvariable variable=SpStagingJsonFile]$SpStagingJsonFile"
                  Write-Host "SpStagingJsonFile: $SpStagingJsonFile"

                  if ($SpFile.Count -gt 1){
                    Write-Host "More than 1 SP manifest with App ID: ${{parameters.AppID}} found, please check App-States folder inventory and try again."
                    Throw "More than 1 Sp manifest with App ID: ${{parameters.AppID}} found, please check App-States folder inventory and try again."
                  }elseif ($SpFile.Count -eq 0){
                    Write-Host "No SP Manifest with App ID: ${{parameters.AppID}} found, please check App-States folder inventory and try again."
                    Throw "No SP Manifest with App ID: ${{parameters.AppID}} found, please check App-States folder inventory and try again."
                  }else{
                    Write-Host "##vso[task.setvariable variable=filesNotFound]false"
                    Write-Host "##vso[task.setvariable variable=SpFile]$SpFile"
                    Write-Host "SP Manifest with App ID: ${{parameters.AppID}} found: $SpFile"
                  }
                # -----Updating SP by locating application with App Name----  
                }elseif ( "${{parameters.AppName}}" -ne "defaultparaAppName" ){
                  # Json file containing the ServicePrincipal details (Hint: Create one in staging folder)
                  $SpStagingJsonFile  = "$(AppStagingFolderPath)${{parameters.AppName}}_Sp.json"
                  Write-Host "##vso[task.setvariable variable=SpStagingJsonFile]$SpStagingJsonFile"
                  Write-Host "SpStagingJsonFile: $SpStagingJsonFile"

                  $SpFileNamePattern = "${{parameters.AppName}}"+"*_ServicePrincipal.json"
                  $SpFile = Get-ChildItem -Path $(AppStatesFolderPath) -Name $SpFileNamePattern
                  if ($SpFile.Count -gt 1){
                    Write-Host "More than 1 SP manifest with App Name: ${{parameters.AppName}} found, please check App-States folder inventory and try again."
                    Throw "More than 1 SP manifest with App Name: ${{parameters.AppName}} found, please check App-States folder inventory and try again."
                  }elseif ($SpFile.Count -eq 0){
                    Write-Host "No SP Manifest with App Name: ${{parameters.AppName}} found, please check App-States folder inventory and try again."
                    throw "No SP Manifest with App Name: ${{parameters.AppName}} found, please check App-States folder inventory and try again."
                  }else{
                    Write-Host "##vso[task.setvariable variable=filesNotFound]false"
                    Write-Host "##vso[task.setvariable variable=SpFile]$SpFile"
                    Write-Host "App Manifest with App Name: ${{parameters.AppName}} found: $SpFile"
                  }
                }else{
                  Write-Host "Error: Please provide a valid App ID or App Name."
                  Throw "Error: Please provide a valid App ID or App Name."
                }  
          - task: PowerShell@2
            name: verifyFiles
            inputs:
              targetType: inline
              script: |
                if (-not (Test-Path -Path '$(SpStagingJsonFile)')){
                  Write-Host "##vso[task.setvariable variable=filesNotFound]true"
                  $noFile = $true
                  Write-Host"Staging File- $(SpStagingJsonFile) not Found"
                }

          - task: DownloadSecureFile@1
            name: connectionCert
            displayName: 'Download Service Connection certificate'
            inputs:
              secureFile: '${{parameters.Environment}}-Service-Connection.pfx'

          - task: PowerShell@2
            name: Update_ServicePrincipal_obj
            inputs:
              targetType: 'filePath'
              filePath: './EntraID/Applications-ADO/Update-ServicePrincipal-REST.ps1'
              arguments: '-JsonFile "$(AppStatesFolderPath)$(SpFile)" -newJsonFile "$(SpStagingJsonFile)" -tenantID $(tenantID) -ClientID $(ClientID) -certFile $(connectionCert.secureFilePath) -CertPwd $(serviceConnectionPrivateKeyPwd) -Environment ${{parameters.Environment}}'

          - task: PowerShell@2
            name: stepCheck
            condition: succeeded()
            inputs:
              targetType: inline
              script: |
                Write-Host "##vso[task.setvariable variable=stepSucceed]true"


          - task: PowerShell@2
            name: Post_Deployment_CleanUP
            condition: always()
            inputs:
              targetType: inline
              script: |
                if (("$(step2succeed)" -eq "false")){ 
                  write-host "Update ServicePrincipal Obj failed"
                }else{
                  write-host "Update ServicePrincipal Obj succeeded."
                }

          - task: PowerShell@2
            name: gitCommit
            #condition: eq(variables.skipGit, 'false')
            condition: eq(variables.stepSucceed, 'true')
            inputs:  
              targetType: inline
              script: |
                git config --global user.email "entraidProject@azuredevops.com"
                git config --global user.name "serivce account"
                git fetch origin $(Build.SourceBranchName):tmp
                git rebase tmp
                git add -A
                git commit -m "Updated SP obj - ${{parameters.AppName}}"
                git push origin HEAD:$(Build.SourceBranchName)
          #- checkout: self
            #clean: true