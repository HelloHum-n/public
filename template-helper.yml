trigger: none

name: Write-File

parameters:
  - name: Environment
    displayName: Environment
    default: 'IST'
    type: string
    values:
    - IST
    - DEV
    - PRD

  - name: AppName
    displayName: Application Name
    default: ''

  - name: AppType
    displayName: Application Type
    default: 'SAML'
    type: string
    values:
    - SAML
    - OIDC

  - name: EntityID
    displayName: Application entity ID or Identifier URI (identifierUris)
    default: 'https://'
    type: string

  - name: SPflowVerification
    displayName: Require SAML2 SP initiated flow (requestSignatureVerification)
    default: 'false'
    type: string
    values:
    - true
    - false

  - name: Description
    displayName: Application Description
    default: 'Default'
    type: string

  - name: nameidentifierFormat
    displayName: Format for the nameidentifier in the claims
    default: 'email'
    type: string
    values:
    - email
    - persistent
    - unspecified

  - name: nameidentifierAttribute
    displayName: User Attribute for the nameidentifier in the claims
    default: 'userprincipalname'
    type: string


variables:
  - name: stepSucceed
    value: false
  - name: AppStagingFolderPath
    value: "./Entra/EntraID/Applications-ADO/${{parameters.Environment}}/Staging/"
  - name: templateFolderPath
    value: "./Entra/EntraID/Applications-ADO/${{parameters.Environment}}/Staging/Templates"
  - name: SAMLappTemplateName
    value: "SAML_App_Template.json"
  - name: OIDCappTemplateName
    value: "OIDC_App_Template.json"    
  - group: ${{parameters.Environment}}-Variables
  - group: ${{parameters.Environment}}-Secrets
  - name: tenantIDvar
    value: $[variables.tenantID]

pool:
  vmImage: 'windows-latest'

jobs:
- job: writeSecretandCommit
  displayName: Generate staging templates
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self
    persistCredentials: true
  - task: PowerShell@2
    name: createTemplates
    inputs:
      targetType: 'inline'
      script: |
        if ( "${{parameters.AppType}}" -eq "SAML" ){
          Get-ChildItem "$(AppStagingFolderPath)"
          Write-host "-______________-"
          Get-ChildItem "$(templateFolderPath)"

          $templateFileObj = Get-content -Path "$(templateFolderPath)/$(SAMLappTemplateName)" -RAW | ConvertFrom-Json
          
          #go through paramers one by one
          #AppName
          $templateFileObj.displayName = "${{parameters.AppName}}"
          #EntityID
          if ("${{parameters.EntityID}}" -ne "https://"){
            $templateFileObj.identifierUris = "${{parameters.EntityID}}"
          }else{
            throw "Please provide the EntityID/IdentifierURIs for the application"
          }
          #SPflowVerification
          $templateFileObj.requestSignatureVerification.isSignedRequestRequired = "${{parameters.SPflowVerification}}"
          #Description
          if ("${{parameters.Description}}" -ne "default"){
            $templateFileObj.Description = "${{parameters.Description}}"
          }
          $AppStagingOutput = $templateFileObj | ConvertTo-Json -Depth 20
        }else{
          $templatefileObj = Get-content -Path $(templateFolderPath)/$(OIDCappTemplateName) -RAW | ConvertFrom-Json
          #$templatefileObj| ConvertTo-Json -Depth 20  
        }

        #App Staging File
        $AppStagingFilePath = "$(AppStagingFolderPath)/${{parameters.AppName}}_App.json"
        $AppStagingOutput | Out-File -FilePath $AppStagingFilePath -Force

        # SP Staging File
        $SpStagingFilePath = "$(AppStagingFolderPath)/${{parameters.AppName}}_Sp.json"
        if ( "${{parameters.AppType}}" -eq "SAML"){
          $newObj = New-Object PSObject
          $newObj | Add-Member -MemberType NoteProperty -Name "preferredSingleSignOnMode"  -Value "saml"
        }else{
          $newObj = New-Object PSObject
          $newObj | Add-Member -MemberType NoteProperty -Name "preferredSingleSignOnMode"  -Value "oidc"
        }
        
        $SpStagingOutput = $newObj | ConvertTo-Json -Depth 20
        $SpStagingFilePath = "$(AppStagingFolderPath)/${{parameters.AppName}}_Sp.json"
        $SpStagingOutput | Out-File -FilePath $SpStagingFilePath -Force


  - script: echo Task 2 filename - $(fileName)
    name: echoOutput
  - script: |
     git config --global user.email "entraidProject@azuredevops.com"
     git config --global user.name "serivce account"
     cd $(Build.SourcesDirectory)\$(System.TeamProject)
     git add -A
     git commit -m "new"
     git push origin HEAD:$(Build.SourceBranchName)
    name: gitCommit
  - checkout: self
    clean: true
#git branch --all